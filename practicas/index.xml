<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Practicas on Alepetepórico Blog</title>
    <link>https://alepeteporico.github.io/practicas/</link>
    <description>Recent content in Practicas on Alepetepórico Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://alepeteporico.github.io/practicas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cifrado asimétrico</title>
      <link>https://alepeteporico.github.io/practicas/asimetrico/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/asimetrico/</guid>
      <description>Tarea 1: Generación de claves  Generamos las claves:
alejandrogv@AlejandroGV:~$ gpg --gen-key gpg (GnuPG) 2.2.12; Copyright (C) 2018 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Nota: Usa &amp;quot;gpg --full-generate-key&amp;quot; para el diálogo completo de generación de clave. GnuPG debe construir un ID de usuario para identificar su clave. Nombre y apellidos: Alejandro Gutiérrez Valencia Dirección de correo electrónico: tojandro@gmail.</description>
    </item>
    
    <item>
      <title>Instalación local de un CMS PHP</title>
      <link>https://alepeteporico.github.io/practicas/cmsphp_local/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/cmsphp_local/</guid>
      <description>Instalamos un servidor LAMP
Apache Hacemos una instalación sencilla:
vagrant@cmsalegv:~$ sudo apt install apache2 apache2-utils  Y creamos una regla en iptables para permitir la conexión http
vagrant@cmsalegv:~$ sudo iptables -I INPUT -p tcp --dport 80 -j ACCEPT  Mariadb Instalamos Mariadb
vagrant@cmsalegv:~$ sudo apt install mariadb-server mariadb-client  PHP Y por últimos realizaremos la instalación de php
vagrant@cmsalegv:~$ sudo apt install php7.3 libapache2-mod-php7.3 php7.3-mysql php-common php7.3-cli php7.3-common php7.3-json php7.</description>
    </item>
    
    <item>
      <title>Práctica mdadm y rclone</title>
      <link>https://alepeteporico.github.io/practicas/mdadm_rclone/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/mdadm_rclone/</guid>
      <description>RAID 5 Fichero VagrantFile:  # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;debian/buster64&amp;quot; config.vm.hostname = &amp;quot;practica1&amp;quot; config.vm.provider :virtualbox do |v| disco = &#39;.vagrant/disco.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco,&amp;quot;--size&amp;quot;, 1024] v.customize [&amp;quot;storageattach&amp;quot;,:id,&amp;quot;--storagectl&amp;quot;,&amp;quot;SATA Controller&amp;quot;,&amp;quot;--port&amp;quot;,1,&amp;quot;--device&amp;quot;,0,&amp;quot;--type&amp;quot;,&amp;quot;hdd&amp;quot;,&amp;quot;--medium&amp;quot;,disco] disco2 = &#39;.vagrant/disco2.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco2,&amp;quot;--size&amp;quot;, 1024] v.customize [&amp;quot;storageattach&amp;quot;,:id,&amp;quot;--storagectl&amp;quot;,&amp;quot;SATA Controller&amp;quot;,&amp;quot;--port&amp;quot;,2,&amp;quot;--device&amp;quot;,0,&amp;quot;--type&amp;quot;,&amp;quot;hdd&amp;quot;,&amp;quot;--medium&amp;quot;,disco2] disco3 = &#39;.vagrant/disco3.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco3,&amp;quot;--size&amp;quot;, 1024] v.customize [&amp;quot;storageattach&amp;quot;,:id,&amp;quot;--storagectl&amp;quot;,&amp;quot;SATA Controller&amp;quot;,&amp;quot;--port&amp;quot;,3,&amp;quot;--device&amp;quot;,0,&amp;quot;--type&amp;quot;,&amp;quot;hdd&amp;quot;,&amp;quot;--medium&amp;quot;,disco3] disco4 = &#39;.vagrant/disco4.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco4,&amp;quot;--size&amp;quot;, 1024] v.customize [&amp;quot;storageattach&amp;quot;,:id,&amp;quot;--storagectl&amp;quot;,&amp;quot;SATA Controller&amp;quot;,&amp;quot;--port&amp;quot;,4,&amp;quot;--device&amp;quot;,0,&amp;quot;--type&amp;quot;,&amp;quot;hdd&amp;quot;,&amp;quot;--medium&amp;quot;,disco4] disco5 = &#39;.vagrant/disco5.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco5,&amp;quot;--size&amp;quot;, 1024] v.</description>
    </item>
    
    <item>
      <title>Configuración del escenario en OpenStack</title>
      <link>https://alepeteporico.github.io/practicas/escenearioos/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/escenearioos/</guid>
      <description>El escenario que debemos montar es el siguiente:
Nosotros tenemos nuestra propia red, pero debemos crear dos nuevas para el escenario y añadir las redes conrrespondientes a sus máquinas
Nuestro siguiente paso será deshabilitar los puertos de Dulcinea que será la máquina que usaremos para conectarnos a las demás y salir al exterior Para este proposito usaremos OpenStack Client alejandrogv@AlejandroGV:~$ source Escritorio/ASIR/hlc/openstackclient/bin/activate source ~/Descargas/Proyecto\ de\ a.gutierrez-openrc.sh
Ahora listaremos las interfaces que tenemos en nuestro proyecto</description>
    </item>
    
    <item>
      <title>DNS, servidor web y base de datos</title>
      <link>https://alepeteporico.github.io/practicas/server_web_bbdd_dns/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/server_web_bbdd_dns/</guid>
      <description>El servidor DNS estará instalado en freston, por ello instalaremos bind en esta máquina
 root@freston:~# apt install bind9  Configuramos el fichero &amp;ldquo;/etc/bind/named.conf.options&amp;rdquo; y añadimos las siguientes líneas:
listen-on { any }; allow-transfer { none }; recursion yes; allow-recursion { any; };  Configuramos el DNS local, la DMZ y externa en el fichero de configuración /etc/bind/named.conf.local:
 view interna { match-clients { 10.0.1.0/24; localhost; }; zone &amp;quot;alegv.gonzalonazareno.org&amp;quot; { type master; file &amp;quot;db.</description>
    </item>
    
    <item>
      <title>Servidor DHCP</title>
      <link>https://alepeteporico.github.io/practicas/dhcp/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/dhcp/</guid>
      <description>Lee el documento Teoría: Servidor DHCP y explica el funcionamiento del servidor DHCP resumido en este gráfico.  En primer lugar el cliente manda una petición para ver si hay un servidor DHCP que pueda darle una dirección.
El servidor reciviría esa petición y le dice al cliente que hay un servidor DHCP y puede ofrecerle una IP, por tanto el cliente pide una IP al servidor.
Por último el servidor al recibir esa última petición le concede una IP dentro de su rango.</description>
    </item>
    
    <item>
      <title>Actualización de CentOS 7 a CentOS 8</title>
      <link>https://alepeteporico.github.io/practicas/centos8/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/centos8/</guid>
      <description>Antes de comenzar debemos instalar si no las tenemos ya las siguientes herramientas:
 [centos@quijote ~]$ sudo yum install epel-release -y [centos@quijote ~]$ sudo yum install yum-utils -y [centos@quijote ~]$ sudo yum install rpmconf -y  Ahora usaremos rpmconf para verificar conflictos en ficheros de configuración:
 [centos@quijote ~]$ sudo rpmconf -a  Limpiamos los paquetes innecesarios:
 [centos@quijote ~]$ sudo package-cleanup --leaves [centos@quijote ~]$ sudo package-cleanup --orphans  Instalamos el nuevo gestor de paquetes que usa CentOS 8, dnf:</description>
    </item>
    
    <item>
      <title>Implantanción y despliegue de una web estática</title>
      <link>https://alepeteporico.github.io/practicas/pagina_est%C3%A1tica/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/pagina_est%C3%A1tica/</guid>
      <description>La instalación es tan sencilla como usar apt:
sudo apt install hugo  Una vez instalado el siguiente paso sería crear un sitio web:
hugo new site [nombre]  Esto creará una carpeta donde podremos configurar nuestra página, para ello primero descargaremos desde la página oficial de hugo un tema. Debemos fijarnos que se corresponde con nuestra versión de hugo o es inferior, si elegimos una plantilla que necesite una versión de hugo superior dará problemas.</description>
    </item>
    
  </channel>
</rss>