<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iweb on Alepetepórico Blog</title>
    <link>https://alepeteporico.github.io/tags/iweb/</link>
    <description>Recent content in Iweb on Alepetepórico Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jun 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://alepeteporico.github.io/tags/iweb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducción a la integración continua </title>
      <link>https://alepeteporico.github.io/practicas/ic/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/ic/</guid>
      <description>Integración continúa de aplicación django  Ya tenemos nuestra aplicación y el entorno virtual de la práctica de Despliegue de una aplicación python usaremos la misma, y realizaremos los test.
(django) alejandrogv@AlejandroGV:~/Escritorio/ASIR/IWEB/despliegue_python/django_tutorial$ python3 manage.py test Creating test database for alias &#39;default&#39;... System check identified no issues (0 silenced). .......... ---------------------------------------------------------------------- Ran 10 tests in 0.056s OK Destroying test database for alias &#39;default&#39;...  Vamos a modificar el fichero polls/templates/polls/index.html para provocar un error, por ejemplo quitando unas llaves provocando así un error de sintaxis.</description>
    </item>
    
    <item>
      <title>Instalación de aplicación web python</title>
      <link>https://alepeteporico.github.io/practicas/python_openstack/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/python_openstack/</guid>
      <description>Vamos a crear el entorno virtual en el cual instalaremos Mezzanine.
alejandrogv@AlejandroGV:~/entornos/mezzanine$ source despliegue/bin/activate (despliegue) alejandrogv@AlejandroGV:~/entornos/mezzanine$  Ahora instalamos con pip mezzanine y creamos un proyecto.
(despliegue) alejandrogv@AlejandroGV:~/proyecto$ pip install mezzanine (despliegue) alejandrogv@AlejandroGV:~/proyecto$ mezzanine-project cms  Vamos a modificar uno de los ficheros que se ha generado cms/settings.py para usar la base de datos sqlite ya que estamos en el entorno de pruebas.
DATABASES = { &amp;quot;default&amp;quot;: { &amp;quot;ENGINE&amp;quot;: &amp;quot;django.</description>
    </item>
    
    <item>
      <title>Despliegue de CMS java</title>
      <link>https://alepeteporico.github.io/practicas/cms_java/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/cms_java/</guid>
      <description>Elegiremos instalar la aplicación con Guacamole, para empezar instalaremos la paquetería necesaria.
vagrant@cmsjava:~$ sudo apt install build-essential libcairo2-dev libjpeg62-turbo-dev libpng-dev libtool-bin libossp-uuid-dev libavcodec-dev libavformat-dev libswscale-dev freerdp2-dev libpango1.0-dev libssh2-1-dev libtelnet-dev libvncserver-dev libwebsockets-dev libpulse-dev libvorbis-dev libwebp-dev  Descargaremos la aplicación del sitio oficial.
vagrant@cmsjava:~$ wget http://archive.apache.org/dist/guacamole/1.2.0/source/guacamole-server-1.2.0.tar.gz  Descomprimimos la carpeta que acabamos de descargar.
vagrant@cmsjava:~$ tar -zxf guacamole-server-1.2.0.tar.gz vagrant@cmsjava:~$ ls guacamole-server-1.2.0  Entraremos y lo instalaremos siguiendo los siguientes pasos.
vagrant@cmsjava:~/guacamole-server-1.2.0$ .</description>
    </item>
    
    <item>
      <title>Despliegue de una aplicación python</title>
      <link>https://alepeteporico.github.io/practicas/despliegue_python/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/despliegue_python/</guid>
      <description>Vamos a desarrollar la aplicación del tutorial de django 3.1. Vamos a configurar tu equipo como entorno de desarrollo para trabajar con la aplicación.  Realizamos un fork de la aplicación añadiendola a nuestros repositorios y seguidamente lo clonaremos en nuestra maquina:
alejandrogv@AlejandroGV:~/Escritorio/ASIR/IWEB/despliegue_python$ git clone git@github.com:alepeteporico/django_tutorial.git  Crearemos el entorno virtual donde instalaremos las dependencias necesarias para hacer funcionar nuestra aplicación.
alejandrogv@AlejandroGV:~/Escritorio/ASIR/IWEB$ python3 -m venv django (django) alejandrogv@AlejandroGV:~/Escritorio/ASIR/IWEB$ pip install -r despliegue_python/django_tutorial/requirements.</description>
    </item>
    
    <item>
      <title>Migración de aplicación web PHP</title>
      <link>https://alepeteporico.github.io/practicas/migracion_durpal/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/migracion_durpal/</guid>
      <description>Nos daremos de alta en un hosting gratuito, en mi caso cdmon. Y crearemos un nuevo hosting.  Migración de la base de datos.  Lo primero que haremos será restaurar nuestra base de datos en nuestro hosting, para ello entraremos en la pestaña de mysql.   Creamos una nueva base de datos, en mi caso la llamaré drupalagv.   y accederemos a phpMyAdmin con las credenciales que se nos otorgan.</description>
    </item>
    
    <item>
      <title>Instalación local de un CMS PHP</title>
      <link>https://alepeteporico.github.io/practicas/cmsphp_local/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/cmsphp_local/</guid>
      <description>VagrantFile Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.define :cmsagv do |cmsagv| cmsagv.vm.box = &amp;quot;debian/buster64&amp;quot; cmsagv.vm.hostname = &amp;quot;cmsagv&amp;quot; cmsagv.vm.network :private_network, ip: &amp;quot;172.22.100.5&amp;quot;, virtualbox__intnet: &amp;quot;interna&amp;quot; cmsagv.vm.network :private_network, ip: &amp;quot;192.168.100.200&amp;quot; end config.vm.define :backup do |backup| backup.vm.box = &amp;quot;debian/buster64&amp;quot; backup.vm.hostname = &amp;quot;backup&amp;quot; backup.vm.network :private_network, ip: &amp;quot;172.22.100.10&amp;quot;, virtualbox__intnet: &amp;quot;interna&amp;quot; end end  Instalamos un servidor LAMP
Apache Hacemos una instalación sencilla:
vagrant@cmsalegv:~$ sudo apt install apache2 apache2-utils  Y creamos una regla en iptables para permitir la conexión http</description>
    </item>
    
    <item>
      <title>Implantanción y despliegue de una web estática</title>
      <link>https://alepeteporico.github.io/practicas/pagina_est%C3%A1tica/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/pagina_est%C3%A1tica/</guid>
      <description>La instalación es tan sencilla como usar apt:
sudo apt install hugo  Una vez instalado el siguiente paso sería crear un sitio web:
hugo new site [nombre]  Esto creará una carpeta donde podremos configurar nuestra página, para ello primero descargaremos desde la página oficial de hugo un tema. Debemos fijarnos que se corresponde con nuestra versión de hugo o es inferior, si elegimos una plantilla que necesite una versión de hugo superior dará problemas.</description>
    </item>
    
  </channel>
</rss>