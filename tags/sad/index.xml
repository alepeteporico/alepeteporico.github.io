<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SAD on Alepetepórico Blog</title>
    <link>https://alepeteporico.github.io/tags/sad/</link>
    <description>Recent content in SAD on Alepetepórico Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://alepeteporico.github.io/tags/sad/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ejercicio 1 cortafuegos</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercicio1_cortafuegos/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercicio1_cortafuegos/</guid>
      <description>Añadiremos las siguientes reglas.   Limpiamos las tablas iptables -F iptables -t nat -F iptables -Z iptables -t nat -Z # Establecemos la política iptables -P INPUT DROP iptables -P OUTPUT DROP iptables -A INPUT -i lo -p icmp -j ACCEPT iptables -A OUTPUT -o lo -p icmp -j ACCEPT iptables -A INPUT -s 192.168.121.0/24 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A OUTPUT -d 192.</description>
    </item>
    
    <item>
      <title>VPN</title>
      <link>https://alepeteporico.github.io/practicas/vpn/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/vpn/</guid>
      <description>VPN de acceso remoto con OpenVPN y certificados x509  Tenemos dos equipos en vagrant a los que queremos configurarles una conexión VPN. empezemos con el servidor, este está conectado a una red 10.99.99.0/24 a parte de la red que usamos para conectarnos a esta.  vagrant@servidor:~$ ip a 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 52:54:00:f5:43:54 brd ff:ff:ff:ff:ff:ff altname enp0s5 altname ens5 inet 192.</description>
    </item>
    
    <item>
      <title>Certificados Digitales</title>
      <link>https://alepeteporico.github.io/practicas/certficiados/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/certficiados/</guid>
      <description>Primero obtendremos nuestro certificado digital en la sede electrónica siguiendo todos los pasos que se nos indican.
  Una vez tengamos nuestro certificado digital podemos importarlo a cualquier navegador, en mi caso quiero importarlo a un navegador firefox que tengo en mi sistema debian 10. Para ello nos dirigiremos a preferencias &amp;gt; Privaciad y Seguridad &amp;gt; Certificados &amp;gt; Ver certificados aquí aparecerá una vetana emergente donde podremos ver todos los certificados guardados que tenemos.</description>
    </item>
    
    <item>
      <title>Integridad, firmas y autentificación</title>
      <link>https://alepeteporico.github.io/practicas/firmas/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/firmas/</guid>
      <description>Tarea 1:  Firmamos un fichero que enviaremos a nuestros compañeros para que comprueben nuestra firma:  alejandrogv@AlejandroGV:~/Descargas$ gpg --output fichero.sign --sign fichero.txt  He enviado un archivo firmado a un compañero que dispone de mi clave pública, los dos hemos verificado la firma.  alejandrogv@AlejandroGV:~/Descargas$ gpg --verify p2pdf.pdf.sign gpg: Firmado el jue 18 nov 2021 12:25:18 CET gpg: usando RSA clave 47742CCB469EB70E132966EDEDA6F79F602CACBD gpg: Firma correcta de &amp;quot;Daniel Miguel Mesa Mejias &amp;lt;danimesamejias@gmail.</description>
    </item>
    
    <item>
      <title>Cifrado asimétrico con gpg y openssl</title>
      <link>https://alepeteporico.github.io/practicas/asimetrico/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/asimetrico/</guid>
      <description>Tarea 1: Generación de claves  Generamos las claves:  alejandrogv@AlejandroGV:~$ gpg --gen-key gpg (GnuPG) 2.2.27; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Nota: Usa &amp;quot;gpg --full-generate-key&amp;quot; para el diálogo completo de generación de clave. GnuPG debe construir un ID de usuario para identificar su clave. Nombre y apellidos: ALejandro Gutiérrez Valencia Dirección de correo electrónico: tojandro@gmail.</description>
    </item>
    
    <item>
      <title>Herramientas de seguridad</title>
      <link>https://alepeteporico.github.io/practicas/herramientas_de_seguridad/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/herramientas_de_seguridad/</guid>
      <description>Sistemas de detección de intrusos  Vamos a usar como sistema de detección de intrusos la herramienta SURICATA, parece ser la más usada a día de hoy   Vamos a instalar el paquete de suricata y oinkmaster que usaremos mas adelante.  root@suricata:~# apt install suricata  La instalación ha sido sencilla, para configurar los parametros básicos iremos al fichero /etc/suricata/suricata.yaml, lo primero que haremos será asegurarnos que suricata escucha por la interfaz correcta.</description>
    </item>
    
    <item>
      <title>Cortafuegos - OpenStack</title>
      <link>https://alepeteporico.github.io/practicas/cortafuegos/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/cortafuegos/</guid>
      <description>Nuestro primer paso será instalar nftables.
 debian@dulcinea:~$ sudo apt install nftables    Activamos y habilitamos este servicio.
 debian@dulcinea:~$ sudo systemctl start nftables debian@dulcinea:~$ sudo systemctl enable nftables    Configuraremos la política por defecto a DROP.
 nft chain inet filter input { policy drop \; } nft chain inet filter forward { policy drop \; } nft chain inet filter output { policy drop \; }    Añadimos las reglas de NAT.</description>
    </item>
    
    <item>
      <title>OpenStack: Configuración HTTPS</title>
      <link>https://alepeteporico.github.io/practicas/https_openstack/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/https_openstack/</guid>
      <description>El siguiente paso de nuestro proyecto es configurar de forma adecuada el protocolo HTTPS en nuestro servidor web para nuestra aplicaciones web. Para ello vamos a emitir un certificado wildcard en la AC Gonzalo Nazareno utilizando para la petición la utilidad &amp;ldquo;gestiona&amp;rdquo;.   Lo primero que debemos hacer para llevarlo a cabo es dirigirnos a centos donde crearemos los directorios nesarios y crearemos una clave RSA.
 [centos@quijote ~]$ sudo mkdir /etc/ssl/private [centos@quijote ~]$ sudo chmod 700 /etc/ssl/private Generating RSA private key, 4096 bit long modulus (2 primes) .</description>
    </item>
    
    <item>
      <title>Práctica mdadm y rclone</title>
      <link>https://alepeteporico.github.io/practicas/mdadm_rclone/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/practicas/mdadm_rclone/</guid>
      <description>RAID 5 Fichero VagrantFile:  # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;debian/buster64&amp;quot; config.vm.hostname = &amp;quot;practica1&amp;quot; config.vm.provider :virtualbox do |v| disco = &#39;.vagrant/disco.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco,&amp;quot;--size&amp;quot;, 1024] v.customize [&amp;quot;storageattach&amp;quot;,:id,&amp;quot;--storagectl&amp;quot;,&amp;quot;SATA Controller&amp;quot;,&amp;quot;--port&amp;quot;,1,&amp;quot;--device&amp;quot;,0,&amp;quot;--type&amp;quot;,&amp;quot;hdd&amp;quot;,&amp;quot;--medium&amp;quot;,disco] disco2 = &#39;.vagrant/disco2.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco2,&amp;quot;--size&amp;quot;, 1024] v.customize [&amp;quot;storageattach&amp;quot;,:id,&amp;quot;--storagectl&amp;quot;,&amp;quot;SATA Controller&amp;quot;,&amp;quot;--port&amp;quot;,2,&amp;quot;--device&amp;quot;,0,&amp;quot;--type&amp;quot;,&amp;quot;hdd&amp;quot;,&amp;quot;--medium&amp;quot;,disco2] disco3 = &#39;.vagrant/disco3.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco3,&amp;quot;--size&amp;quot;, 1024] v.customize [&amp;quot;storageattach&amp;quot;,:id,&amp;quot;--storagectl&amp;quot;,&amp;quot;SATA Controller&amp;quot;,&amp;quot;--port&amp;quot;,3,&amp;quot;--device&amp;quot;,0,&amp;quot;--type&amp;quot;,&amp;quot;hdd&amp;quot;,&amp;quot;--medium&amp;quot;,disco3] disco4 = &#39;.vagrant/disco4.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco4,&amp;quot;--size&amp;quot;, 1024] v.customize [&amp;quot;storageattach&amp;quot;,:id,&amp;quot;--storagectl&amp;quot;,&amp;quot;SATA Controller&amp;quot;,&amp;quot;--port&amp;quot;,4,&amp;quot;--device&amp;quot;,0,&amp;quot;--type&amp;quot;,&amp;quot;hdd&amp;quot;,&amp;quot;--medium&amp;quot;,disco4] disco5 = &#39;.vagrant/disco5.vdi&#39; v.customize [&amp;quot;createhd&amp;quot;,&amp;quot;--filename&amp;quot;,disco5,&amp;quot;--size&amp;quot;, 1024] v.</description>
    </item>
    
  </channel>
</rss>
