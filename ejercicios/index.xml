<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ejercicios on Alepetepórico Blog</title>
    <link>https://alepeteporico.github.io/ejercicios/</link>
    <description>Recent content in Ejercicios on Alepetepórico Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://alepeteporico.github.io/ejercicios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; uwsgi</title>
      <link>https://alepeteporico.github.io/ejercicios/apache_uwsgi/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/apache_uwsgi/</guid>
      <description>Tendremos nuestro entorno virtual donde debemos instalar los siguientes paquetes.  (ejercicio3) alejandrogv@AlejandroGV:~$ pip install flask uwsgi  Clonamos la aplicación que instalaremos.  alejandrogv@AlejandroGV:~/Escritorio/ASIR/IWEB$ git clone https://github.com/josedom24/guestbook.git  En este repositorio encontraremos una carpeta llamada app donde se alojará un fichero llamado app.py ahí debemos crear un fichero llamado wsgi.py con el siguiente contenido.  from app import prog as application  Instalamos los paquetes del requirementes.txt que se aloja también la carpeta app.</description>
    </item>
    
    <item>
      <title>Instalación y configuración de un servidor DNS esclavo </title>
      <link>https://alepeteporico.github.io/ejercicios/dns_ejercicio2/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/dns_ejercicio2/</guid>
      <description>creamos una máquina que actuara de DNS secundario, el primer paso será cambiar el hostname de está maquina.  vagrant@gutierrezvalencia:~$ hostname -f gutierrezvalencia.iesgn.org  Nos dirigimos al DNS primario y configuramos el fichero /etc/bind/named.conf.options  options { directory &amp;quot;/var/cache/bind&amp;quot;; allow-query { 10.0.0.0/24; }; allow-transfer { none; }; auth-nxdomain no; # conform to RFC1035 recursion no; dnssec-validation auto; listen-on-v6 { any; }; };  Y también debemos cambiar el /etc/bind/named.conf.local para añadir el rol de maestro.</description>
    </item>
    
    <item>
      <title>Ejercicio 4 cortafuegos</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercicio4_cortafuegos/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercicio4_cortafuegos/</guid>
      <description>Realizaremos las mismas reglas que en el ejercicio 3, ahora en nftables, para ello usaremos como hicimos el ejercicio 2 la familia inet sobre las tablas de nftables para que valgan tanto para ipv4 como para ipv6. Hagamos las tabalas y cadenas necesarias para empezar.
  Añadimos una regla para tener conexión ssh con la máquina.
  nft add rule inet filter input ip saddr 192.168.1.0/24 tcp dport 22 ct state new,established counter accept nft add rule inet filter output ip daddr 192.</description>
    </item>
    
    <item>
      <title>Ejercicio 3 cortafuegos</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercicio3_cortafuegos/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercicio3_cortafuegos/</guid>
      <description>Tendremos una máquina conectado a dos interfaces red, una que da al exterior y otra interna. Lo una vez preparada debemos hacer una regla snat para que la red interna pueda salir al exterior.  iptables -t nat -A POSTROUTING -s 172.16.0.0/24 -o ens3 -j MASQUERADE  Como hemos estado haciendo vamos a añadir la regla de ssh para poder poner la politica DROP sin problema.  iptables -A INPUT -s 192.</description>
    </item>
    
    <item>
      <title>Ejercicio 2 cortafuegos</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercicio2_cortafuegos/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercicio2_cortafuegos/</guid>
      <description>En este ejercicio realizaremos todos los que hicimos en iptables en el primero ahora con nftables.
  Lo primero que haremos será añadir una tabla donde filtraremos los paquetes, ponemos la familia inet ya que estas reglas deben funcionar tanto en ipv4 como ipv6.
  root@servidor:~# nft add table inet filter  Debemos crear una cadena que acepte los paquete para poder seguir con nuestra conexión ssh.</description>
    </item>
    
    <item>
      <title>Ejercicio 1 cortafuegos</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercicio1_cortafuegos/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercicio1_cortafuegos/</guid>
      <description>Añadiremos las siguientes reglas.  # Limpiamos las tablas iptables -F iptables -t nat -F iptables -Z iptables -t nat -Z # Establecemos la política iptables -P INPUT DROP iptables -P OUTPUT DROP iptables -A INPUT -i lo -p icmp -j ACCEPT iptables -A OUTPUT -o lo -p icmp -j ACCEPT iptables -A INPUT -s 192.168.121.0/24 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A OUTPUT -d 192.</description>
    </item>
    
    <item>
      <title>Ejercicios kubernetes</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercicos_kubernetes/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercicos_kubernetes/</guid>
      <description>Ejercicio 1  Pantallazo con la salida de minikube status y pantallazo con la salida de kubectl get nodes -o wide.  alejandrogv@AlejandroGV:~$ minikube status minikube type: Control Plane host: Running kubelet: Running apiserver: Running kubeconfig: Configured alejandrogv@AlejandroGV:~$ kubectl get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME minikube Ready control-plane,master 6d23h v1.23.1 192.168.39.156 &amp;lt;none&amp;gt; Buildroot 2021.02.4 4.19.202 docker://20.10.12 Ejercicio 2  Fichero yaml que has creado con la definición del Pod.</description>
    </item>
    
    <item>
      <title>Ejercicios de docker</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercicios_docker/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercicios_docker/</guid>
      <description>Introducción   Crearemos un contenedor demonio a partir de la imagen nginx, el contenedor se debe llamar servidor_web y se debe acceder a él utilizando el puerto 8181 del ordenador donde tengas instalado docker.
  Creación y comprobación de que funciona el contenedor
  alejandrogv@AlejandroGV:~$ docker run --name servidor_web -p 8181:80 -d nginx 964b2c315b83655e5d662a88e620a23f1eaac38666cc64170cd5cd62db72e5fd alejandrogv@AlejandroGV:~$ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 964b2c315b83 nginx &amp;quot;/docker-entrypoint.</description>
    </item>
    
    <item>
      <title>Configuración inicial de LDAP</title>
      <link>https://alepeteporico.github.io/ejercicios/configuracion_ldap/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/configuracion_ldap/</guid>
      <description>LDAP es un protocolo de tipo cliente-servidor para acceder a un servicio de directorio. Un directorio es como una base de datos, pero en general contiene información más descriptiva y más basada en atributos. Realizaremos esta configuración inicial en nuestro escenario en kvm, en contreto en nuestra maquina apolo, la cual entre otras cosas contiene por ejemplo nuestro dns  Empezemos con la instalación del paquete de ldap.  debian@apolo:~$ sudo apt install slapd  Durante esta instalación tendremos que introducir una contraseña para el administrador.</description>
    </item>
    
    <item>
      <title>Ejercicio correo</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercicio_correo/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercicio_correo/</guid>
      <description>Ejercicio 1: Envío local, entre usuarios del mismo servidor   Tenemos distintos parametros configurables, como por ejemplo en el fichero /etc/postfix/main.cf podemos configurar el parametro myorigin que es el dominio donde se va a enviar nuestro correo y mydestination se refiere a los dominios que considera que son suyos, si llegara algun correo a a cualquiera de los dominios que añadamos el servidor recibirá estos correos. Y otro que usaremos más adelante es el relayhost, aquí podremos añadir un servidor de correo que redirija nuestros envios.</description>
    </item>
    
    <item>
      <title>PLSQL</title>
      <link>https://alepeteporico.github.io/ejercicios/plsql/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/plsql/</guid>
      <description>Realiza una función que reciba el código de un aerogenerador y una fecha y devuelva el total de energía producida en esa fecha. Debes controlar las siguientes excepciones: Aerogenerador inexistente y Aerogenerador en desconexión durante ese día.  BEGIN
END;</description>
    </item>
    
    <item>
      <title>Migración de CentOS 8 a Rocky</title>
      <link>https://alepeteporico.github.io/ejercicios/migracion_rocky/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/migracion_rocky/</guid>
      <description>Vamos a usar la distribución Rocky porque es una instalación sencilla, esta distribución está sopoprtada de la misma forma que estaba soportada CentOS. Esto nos asegura que tendremos nuestro sistema actualizado tal como teníamos CentOS, es más, esto no es mas que una distribución &amp;ldquo;hija&amp;rdquo; de la CentOS creada simplemente para sustituir a esta distribución ya sin soporte. Y es exactamente lo que haremos.    Comprobamos la version de centos que tenemos  [centos@migracion ~]$ hostnamectl Static hostname: migracion.</description>
    </item>
    
    <item>
      <title>Boletín de Triggers</title>
      <link>https://alepeteporico.github.io/ejercicios/boletin_triggers/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/boletin_triggers/</guid>
      <description>Haz un trigger que solo permita a los vendedores tener comisiones. CREATE OR REPLACE TRIGGER Com_vend BEFORE INSERT OR UPDATE ON emp BEGIN IF JOB!=&#39;Vendedor&#39; THEN RAISE_APPLICATION_ERROR(-20100,&#39;Los empleados que no sean vendedores no pueden tener comisiones&#39;); END IF; END; Registrar todas las operaciones sobre la tabla EMP de SCOTT en una tabla llamada AUDIT_EMP donde se guarde usuario, fecha, tipo de operación y datos que ha modificado. CREATE OR REPLACE TRIGGER audit_empleados AFTER INSERT OR UPDATE OR DELETE ON emp BEGIN INSERT INTO AUDIT_EMP() </description>
    </item>
    
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; gunicorn</title>
      <link>https://alepeteporico.github.io/ejercicios/gunicorn/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/gunicorn/</guid>
      <description>Vamos a instalar este cms llamado gunicorn, para ello creamos un entorno virutal y lo instalamos:  (gunicorn) vagrant@cmsagv:~$ pip install gunicorn  Vamos a instalar las dependencias del fichero requirements  (gunicorn) vagrant@cmsagv:~/guestbook/app$ pip install -r requirements.txt  Ahora vamos a crear un virtualhost donde añadiremos el modulo de proxy inverso ya. Y moveremos el guestbook a /var/www/  &amp;lt;VirtualHost *:80&amp;gt; ServerName www.alegv-guestbook.com DocumentRoot /var/www/guestbook/app/ ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.</description>
    </item>
    
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; mod_wsgi</title>
      <link>https://alepeteporico.github.io/ejercicios/wsgi/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/wsgi/</guid>
      <description>Creamos un entorno virtual y lo activamos:  vagrant@cmsagv:~/wsgi$ python3 -m venv wsgi (wsgi) vagrant@cmsagv:~$ source wsgi/bin/activate  Después de clonar la aplicación vamos a instalar los paquetes del fichero requeriments.txt.  (wsgi) vagrant@cmsagv:~/flask_temperaturas$ pip install -r requirements.txt  Tenemos que instalar el módulo de apache para que wsgi funcione  vagrant@cmsagv:~/flask_temperaturas$ sudo apt install libapache2-mod-wsgi-py3  Ahora creamos un fichero en el respositorio llamado wsgi.py donde añadiremos la siguiente línea:  from app import app as application  Creamos un virtual host con la siguiente configuración:  &amp;lt;VirtualHost *:80&amp;gt; WSGIDaemonProcess flask_temp python-path=/home/vagrant/flask_temperaturas:/home/vagrant/venv/fla&amp;gt; WSGIProcessGroup flask_temp WSGIScriptAlias / /home/vagrant/flask_temperaturas/wsgi.</description>
    </item>
    
    <item>
      <title>Ejercicio 1 DNS</title>
      <link>https://alepeteporico.github.io/ejercicios/ejercico1_dns/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/ejercico1_dns/</guid>
      <description>Empezaremos a añadir las zonas de las que nuestro servidor tiene autoridad en el fichero /etc/bind/named.conf.local, dejandolo tal que así (tener en cuenta que hay que descomentar la primera línea).  include &amp;quot;/etc/bind/zones.rfc1918&amp;quot;; zone &amp;quot;iesgn.org&amp;quot; { type master; file &amp;quot;db.iesgn.org&amp;quot;; }; zone &amp;quot;0.0.10.in-addr.arpa&amp;quot; { type master; file &amp;quot;db.0.0.10&amp;quot;; };  Ahora definiremos los fichero db.iesgn.org y db.0.0.10 dentro de /var/cache/bind/ vamos primero con la zona directa:  $TTL 86400 @ IN SOA alegv.</description>
    </item>
    
    <item>
      <title>Módulos en apache</title>
      <link>https://alepeteporico.github.io/ejercicios/modulos_apache/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/modulos_apache/</guid>
      <description>UserDIR   Este módulo nos permitirá que cada usuario tenga una carpeta en su home llamada public_html donde podrá añadir contenido web.
  Vamos a instalar este módulo:
  vagrant@cmsagv:~$ sudo a2enmod userdir  Ahora creamos la carpeta public_html y le damos los permisos necesarios.  vagrant@cmsagv:~$ mkdir public_html vagrant@cmsagv:~$ sudo chmod 0755 public_html/  Y ya tenemos nuestro directorio donde podemos subir contenido. Aunque podemos cambiar el nombre de esta carpeta, vamos a llamarla personal y para que el módulo pueda ver el cambio vamos al fichero /etc/apache2/mods-enabled/php7.</description>
    </item>
    
    <item>
      <title>Configuración de apache mediante archivo .htaccess </title>
      <link>https://alepeteporico.github.io/ejercicios/apache_htaccess/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/apache_htaccess/</guid>
      <description>Date de alta en un proveedor de hosting. ¿Si necesitamos configurar el servidor web que han configurado los administradores del proveedor?, ¿qué podemos hacer? Explica la directiva AllowOverride de apache2. Utilizando archivos .htaccess realiza las siguientes configuraciones:  El hosting que usaré será 000webhost  Habilita el listado de ficheros en la URL http://host.dominio/nas.   En nuestro hosting tendremos una carpeta llamada public_html en la cual podremos encontrar un fichero llamado .</description>
    </item>
    
    <item>
      <title>Control de acceso, autentificación y autorización</title>
      <link>https://alepeteporico.github.io/ejercicios/control_acceso/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/control_acceso/</guid>
      <description>Crea un escenario en Vagrant o reutiliza uno de los que tienes en ejercicios anteriores, que tenga un servidor con una red publica, y una privada y un cliente conectada a la red privada. Crea un host virtual departamentos.iesgn.org  Para está práctica podremos usar la misma máquina de vagrant que usamos para las prácticas del cms y de mapeo.  A la URL departamentos.iesgn.org/intranet sólo se debe tener acceso desde el cliente de la red local, y no se pueda acceder desde la anfitriona por la red pública.</description>
    </item>
    
    <item>
      <title>Mapear URL a ubicaciones de un sistema de ficheros</title>
      <link>https://alepeteporico.github.io/ejercicios/mapeo/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alepeteporico.github.io/ejercicios/mapeo/</guid>
      <description>Crea un nuevo host virtual que es accedido con el nombre www.mapeo.com, cuyo DocumentRoot sea /srv/mapeo.   En primer lugar para que nuestro apache pueda acceder a /srv/ y reconocer esta ruta como DocumentRoot debemos modificar el fichero etc/apache2/apache2.conf y descomentar las siguientes líneas.
 &amp;lt;Directory /srv/&amp;gt; Options Indexes FollowSymLinks AllowOverride None Require all granted &amp;lt;/Directory&amp;gt;    Una vez hecho esto creamos la carpeta mapeo en /srv/ y añadimos el nuevo host virtual en sites-avaiable, veamos como quedaría el fichero de sites-avaiable.</description>
    </item>
    
  </channel>
</rss>
